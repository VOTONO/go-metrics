// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/VOTONO/go-metrics/internal/server/repo (interfaces: MetricStorer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/VOTONO/go-metrics/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricStorer is a mock of MetricStorer interface.
type MockMetricStorer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStorerMockRecorder
}

// MockMetricStorerMockRecorder is the mock recorder for MockMetricStorer.
type MockMetricStorerMockRecorder struct {
	mock *MockMetricStorer
}

// NewMockMetricStorer creates a new mock instance.
func NewMockMetricStorer(ctrl *gomock.Controller) *MockMetricStorer {
	mock := &MockMetricStorer{ctrl: ctrl}
	mock.recorder = &MockMetricStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorer) EXPECT() *MockMetricStorerMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockMetricStorer) All() (map[string]models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockMetricStorerMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockMetricStorer)(nil).All))
}

// Get mocks base method.
func (m *MockMetricStorer) Get(arg0 string) (models.Metric, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(models.Metric)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricStorerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricStorer)(nil).Get), arg0)
}

// Store mocks base method.
func (m *MockMetricStorer) Store(arg0 models.Metric) (*models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockMetricStorerMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMetricStorer)(nil).Store), arg0)
}
